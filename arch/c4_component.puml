@startuml

title Component Diagram
'Component diagrams (level 3): decompose containers into interrelated components, and relate the components to other containers or other systems;

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5
!include DEVICONS/react.puml
!include DEVICONS/nodejs.puml
!include FONTAWESOME/file_alt.puml
!include FONTAWESOME/users.puml
!include FONTAWESOME/github.puml
!include FONTAWESOME/html5.puml


LAYOUT_WITH_LEGEND()

Person(user, "Users", "People looking for repository information", $sprite="users")
Container_Boundary(spa, "SE577 System - HTML") {
	Component(routing, "Routing", "Next.js", "Provided by the Framework: Provides routing between views on the client", $sprite="react")
	Component(layout, "Layout", "../src/component/Layout.tsx", "Provides basic UI layout", $sprite="react")
	Component(header, "Header", "../src/component/Layout.tsx", "Provides the header UI components", $sprite="react")
	Component(footer, "Footer", "../src/component/Layout.tsx", "Provides the footer UI components", $sprite="react")
	Component(loginView, "Login page", "./login", "Provides basic UI layout", $sprite="react")
	Component(indexView, "Index page", "./index", "Login page", $sprite="react")
	Component(aboutView, "About page", "./about", "Simple about page", $sprite="react")
	Component(reposView, "Repositories view", "./repos.tsx", "List of all repositories", $sprite="react")
	Component(repoView, "Repository timeline view", "./repo/[repo].tsx", "Repository timeline view", $sprite="react")
	Component(cardComponent, "Single Card", "../src/component/ACard.tsx", "UI card component", $sprite="react")
	Component(gistsView, "Gists view", "./gists.tsx", "Shows the usere's Gists", $sprite="react")

}

Container_Boundary(nodejs, "SE577 System - API") {
	Component(reposController, "Repositories contrtoller", "./api/repos.ts", "Repositories controller", $sprite="nodejs")
	Component(repoController, "Repository timeline contrtoller", "./api/repo/[repo].ts", "Repository timeline controller", $sprite="nodejs")
	Component(gistsController, "Gists contrtoller", "./api/gists.ts", "Gists controller", $sprite="nodejs")
}

Container_Boundary(gh, "GitHub System") {
	ContainerDb_Ext(db, "GitHub", "GitHub REST API", "Holds repository and Gist information", $sprite="github")
	ContainerDb_Ext(auth, "GitHub", "OAuth Authorization server", "Authenticates user for REST API calls", $sprite="github")
}


Rel(user, routing, "Uses", "http")
Rel(routing, layout, "Uses")
Rel_R(layout, footer, "Uses")
Rel_L(layout, header, "Uses")
Rel(layout, indexView, "Uses")
Rel(layout, loginView, "Uses")
Rel(layout, aboutView, "Uses")
Rel(layout, gistsView, "Uses")
Rel(layout, reposView, "Uses")
Rel(layout, repoView, "Uses")
Rel_U(reposView, cardComponent, "Uses")
Rel_U(gistsView, cardComponent, "Uses")


Rel_D(repoView, repoController, "Enriches", "REST")
Rel_D(reposView, reposController, "Enriches", "REST")
Rel_D(gistsView, gistsController, "Enriches", "REST")
Rel_D(reposController, db, "Reads", "REST")
Rel_D(gistsController, db, "Reads", "REST")
Rel_D(repoController, db, "Reads", "REST")

Rel_D(aboutView, db, "Reads", "REST")
Rel_D(loginView, auth, "OAuth flow")

Lay_R(loginView, aboutView)
Lay_R(aboutView, repoView)
Lay_R(repoView, gistsView)
Lay_R(gistsView, reposView)


Lay_D(spa, nodejs)
Lay_R(repoController, gistsController)
Lay_R(reposController, gistsController)
Lay_D(nodejs, gh)

@enduml
